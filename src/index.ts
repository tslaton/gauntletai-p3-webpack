import { app, BrowserWindow, ipcMain, Menu, Tray, nativeImage, dialog, Notification, shell } from 'electron';
import path from 'node:path';
import fs from 'node:fs';
import os from 'node:os';
const Store = require('electron-store').default || require('electron-store');
import chokidar from 'chokidar';
import { createPDFPipeline, type PDFState } from './pipelines/pdfPipeline';
import { createOrganizationPipeline, type OrganizationState, cleanupEmptyDirectories } from './pipelines/organizationPipeline';
import { devLog, errorLog } from './utils/logger';
import { fetchOllamaModels } from './utils/ollama';
import { cleanupMetadata, getMetadataStats } from './utils/metadataCleanup';
import { updateFileMetadata, readMetadata } from './utils/metadataManager';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const store = new Store();
let mainWindow: BrowserWindow | null = null;
let tray: Tray | null = null;
let watcher: ReturnType<typeof chokidar.watch> | null = null;
let fileWranglerWatcher: ReturnType<typeof chokidar.watch> | null = null;

// PDF processing queue to prevent concurrent processing
interface QueueItem {
  filePath: string;
  addedAt: Date;
}
const processingQueue: QueueItem[] = [];
let isProcessing = false;

// Auto-organization debounce timer
let autoOrganizeTimer: NodeJS.Timeout | null = null;

// Directory cleanup debounce timer
let directoryCleanupTimer: NodeJS.Timeout | null = null;

// Pipeline instance - cached and reused
let pdfPipeline: ReturnType<typeof createPDFPipeline> | null = null;
let currentPipelineConfig = { openaiApiKey: '', llmModel: '', useLowercase: true, processingMode: 'accuracy' };

// Configuration
let WATCH_FOLDER = (store as any).get('watchFolder', path.join(os.homedir(), 'Documents', 'inbox')) as string;
let OPENAI_API_KEY = process.env.OPENAI_API_KEY || (store as any).get('openaiApiKey', '') as string;
let LLM_MODEL = process.env.LLM_MODEL || (store as any).get('llmModel', 'gpt-4.1-nano') as string;
let USE_LOWERCASE = (store as any).get('useLowercase', true) as boolean;
let PROCESSING_MODE = (store as any).get('processingMode', 'accuracy') as string; // 'accuracy' or 'speed'
let AUTO_ORGANIZE = (store as any).get('autoOrganize', true) as boolean;
let AUTO_ORGANIZE_THRESHOLD = (store as any).get('autoOrganizeThreshold', 10) as number;

// Log startup configuration
devLog('Startup configuration:');
devLog('- Watch folder:', WATCH_FOLDER);
devLog('- OpenAI API key:', OPENAI_API_KEY ? 'Set' : 'Not set');
devLog('- LLM Model:', LLM_MODEL);
devLog('- Use lowercase:', USE_LOWERCASE);
devLog('- Processing mode:', PROCESSING_MODE);
devLog('- Auto organize:', AUTO_ORGANIZE);
devLog('- Auto organize threshold:', AUTO_ORGANIZE_THRESHOLD);

// Initialize pipeline with current config
function initializePipeline() {
  if (!pdfPipeline || 
      currentPipelineConfig.openaiApiKey !== OPENAI_API_KEY || 
      currentPipelineConfig.llmModel !== LLM_MODEL ||
      currentPipelineConfig.useLowercase !== USE_LOWERCASE ||
      currentPipelineConfig.processingMode !== PROCESSING_MODE) {
    devLog('Creating new PDF pipeline with updated configuration');
    devLog('API Key configured:', !!OPENAI_API_KEY);
    devLog('Model:', LLM_MODEL);
    devLog('Processing mode:', PROCESSING_MODE);
    mainWindow?.webContents.send('debug-log', `API Key: ${OPENAI_API_KEY ? 'Configured' : 'Not configured'}, Model: ${LLM_MODEL}`);
    
    pdfPipeline = createPDFPipeline(OPENAI_API_KEY, LLM_MODEL, USE_LOWERCASE, PROCESSING_MODE);
    currentPipelineConfig = { openaiApiKey: OPENAI_API_KEY, llmModel: LLM_MODEL, useLowercase: USE_LOWERCASE, processingMode: PROCESSING_MODE };
  }
  return pdfPipeline;
}

// Configuration will be used when processing PDFs

// Ensure watch folder exists
if (!fs.existsSync(WATCH_FOLDER)) {
  fs.mkdirSync(WATCH_FOLDER, { recursive: true });
}

const createWindow = () => {  
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 900,
    height: 700,
    icon: app.isPackaged ? path.join(process.cwd(), 'src', 'assets', 'icon.png') : undefined,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  // Wait for renderer to be ready
  mainWindow.webContents.on('did-finish-load', () => {
    console.log('[Main] Renderer did-finish-load event');
    mainWindow?.webContents.send('debug-log', 'Renderer loaded (did-finish-load)');
  });
  
  mainWindow.webContents.on('dom-ready', () => {
    console.log('[Main] Renderer dom-ready event');
    mainWindow?.webContents.send('debug-log', 'Renderer DOM ready');
  });

  mainWindow.on('close', (event) => {
    if (!app.isQuitting) {
      event.preventDefault();
      mainWindow?.hide();
    }
  });
  
  // Register DevTools shortcut
  mainWindow.webContents.on('before-input-event', (event, input) => {
    // On macOS, use Cmd+Shift+I; on other platforms use Ctrl+Shift+I
    const isMac = process.platform === 'darwin';
    const modifierPressed = isMac ? input.meta : input.control;
    
    if (input.key.toLowerCase() === 'i' && input.shift && modifierPressed) {
      event.preventDefault();
      mainWindow?.webContents.toggleDevTools();
    }
  });
  
};

const createTray = () => {
  const icon = nativeImage.createEmpty();
  tray = new Tray(icon);
  
  const contextMenu = Menu.buildFromTemplate([
    { 
      label: 'Show App', 
      click: () => {
        mainWindow?.show();
      } 
    },
    { 
      label: 'Open PDF Folder', 
      click: () => {
        shell.openPath(WATCH_FOLDER);
      } 
    },
    { type: 'separator' },
    { 
      label: 'Quit', 
      click: () => {
        app.isQuitting = true;
        app.quit();
      } 
    }
  ]);
  
  tray.setToolTip('File Wrangler');
  tray.setContextMenu(contextMenu);
  
  tray.on('click', () => {
    mainWindow?.show();
  });
};

// Setup file watcher
const setupWatcher = () => {
  if (watcher) {
    watcher.close();
  }
  
  devLog('Setting up watcher for folder:', WATCH_FOLDER);
  
  // Send debug info to renderer
  mainWindow?.webContents.send('debug-log', `Setting up watcher for: ${WATCH_FOLDER}`);
  
  // Watch the folder itself, not a glob pattern
  watcher = chokidar.watch(WATCH_FOLDER, {
    persistent: true,
    ignoreInitial: true,
    // Force polling on all platforms for consistency
    usePolling: true,
    interval: 500, // More frequent polling
    binaryInterval: 500,
    alwaysStat: true,
    depth: 0,
    awaitWriteFinish: {
      stabilityThreshold: 1000,
      pollInterval: 100
    },
    // Ignore the 'file wrangler' directory where processed files are stored
    ignored: path.join(WATCH_FOLDER, 'file wrangler', '**')
  });
  
  watcher.on('add', async (filePath: string) => {
    // Only process PDF files
    if (path.extname(filePath).toLowerCase() !== '.pdf') {
      return;
    }
    
    
    devLog('PDF detected:', filePath);
    mainWindow?.webContents.send('pdf-added', filePath);
    
    if (PROCESSING_MODE === 'speed') {
      // Parallel processing - process immediately
      devLog('Processing in parallel mode (speed)');
      processPDFFile(filePath).catch(error => {
        errorLog('Error processing PDF:', error);
        mainWindow?.webContents.send('processing-update', {
          path: filePath,
          status: 'error',
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      });
    } else {
      // Sequential processing - use queue
      devLog('Processing in sequential mode (accuracy)');
      processingQueue.push({
        filePath,
        addedAt: new Date()
      });
      
      devLog(`Added to queue: ${filePath} (Queue size: ${processingQueue.length})`);
      
      // Start processing the queue
      processQueue();
    }
  });
  
  watcher.on('error', (error: Error) => {
    errorLog('Watcher error:', error);
    mainWindow?.webContents.send('debug-log', `Watcher error: ${error.message}`);
  });
  
  watcher.on('ready', () => {
    devLog('Watcher is ready and monitoring for PDF files');
    mainWindow?.webContents.send('debug-log', 'Watcher is ready and monitoring for PDF files');
  });
  
  // Also watch for all events to debug
  watcher.on('all', (event: string, filePath: string) => {
    devLog('Watcher event:', event, filePath);
    mainWindow?.webContents.send('debug-log', `Watcher event: ${event} ${path.basename(filePath)}`);
  });
  
  devLog('Watching folder:', WATCH_FOLDER);
  
  // Test if we can access the folder
  try {
    const files = fs.readdirSync(WATCH_FOLDER);
    devLog('Files in watch folder:', files);
    mainWindow?.webContents.send('debug-log', `Found ${files.length} files in watch folder`);
  } catch (error: any) {
    errorLog('Cannot read watch folder:', error);
    mainWindow?.webContents.send('debug-log', `Cannot read watch folder: ${error}`);
    
    // If permission denied, show a dialog to help user
    if (error.code === 'EPERM' || error.code === 'EACCES') {
      dialog.showMessageBox(mainWindow!, {
        type: 'warning',
        title: 'Folder Access Required',
        message: 'File Wrangler needs permission to access your Documents folder.',
        detail: 'Please grant access when prompted, or go to System Preferences > Security & Privacy > Privacy > Files and Folders and grant access to File Wrangler.',
        buttons: ['OK', 'Choose Different Folder']
      }).then(result => {
        if (result.response === 1) {
          // Let user choose a different folder
          ipcMain.emit('select-folder');
        }
      });
    }
  }
  
  // Also set up the file wrangler watcher
  setupFileWranglerWatcher();
};

// Helper function to find a file anywhere in the file wrangler directory
async function findFileInFileWrangler(fileWranglerPath: string, filename: string): Promise<string | null> {
  async function searchDir(dir: string): Promise<string | null> {
    try {
      const entries = await fs.promises.readdir(dir, { withFileTypes: true });
      
      for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory() && !entry.name.startsWith('.')) {
          const found = await searchDir(fullPath);
          if (found) return found;
        } else if (entry.isFile() && entry.name === filename) {
          return fullPath;
        }
      }
    } catch (error) {
      // Ignore errors for individual directories
    }
    
    return null;
  }
  
  return searchDir(fileWranglerPath);
}

// Schedule comprehensive directory cleanup with debouncing
function scheduleDirectoryCleanup() {
  // Clear existing timer if any
  if (directoryCleanupTimer) {
    clearTimeout(directoryCleanupTimer);
    devLog('Directory cleanup timer reset');
  }
  
  // Set new timer for 2 seconds to allow multiple file operations to complete
  directoryCleanupTimer = setTimeout(async () => {
    devLog('Running comprehensive directory cleanup...');
    try {
      const fileWranglerPath = path.join(WATCH_FOLDER, 'file wrangler');
      if (fs.existsSync(fileWranglerPath)) {
        const deletedDirs = await cleanupEmptyDirectories(fileWranglerPath);
        if (deletedDirs.length > 0) {
          devLog(`Cleaned up ${deletedDirs.length} empty directories: ${deletedDirs.join(', ')}`);
          mainWindow?.webContents.send('debug-log', `Cleaned up ${deletedDirs.length} empty directories`);
        }
      }
    } catch (error) {
      errorLog('Error during directory cleanup:', error);
    }
    directoryCleanupTimer = null;
  }, 2000);
}

// Setup watcher for the file wrangler directory to detect file removals
const setupFileWranglerWatcher = () => {
  const fileWranglerPath = path.join(WATCH_FOLDER, 'file wrangler');
  
  // Only set up if the directory exists
  if (!fs.existsSync(fileWranglerPath)) {
    devLog('File wrangler directory does not exist yet, skipping watcher setup');
    return;
  }
  
  if (fileWranglerWatcher) {
    fileWranglerWatcher.close();
  }
  
  devLog('Setting up file wrangler watcher for:', fileWranglerPath);
  
  fileWranglerWatcher = chokidar.watch(fileWranglerPath, {
    persistent: true,
    ignoreInitial: true,
    usePolling: true,
    interval: 1000,
    binaryInterval: 1000,
    depth: 99, // Watch all subdirectories
    // Don't ignore any files - we want to track all movements
  });
  
  // Track file movements to detect moves vs deletions
  const pendingRemovals = new Map<string, NodeJS.Timeout>();
  
  fileWranglerWatcher.on('unlink', async (filePath: string) => {
    // Only handle PDF files
    if (path.extname(filePath).toLowerCase() !== '.pdf') {
      return;
    }
    
    const filename = path.basename(filePath);
    devLog(`File unlinked from: ${filePath}`);
    
    // Clear any existing timer for this file
    if (pendingRemovals.has(filename)) {
      clearTimeout(pendingRemovals.get(filename)!);
    }
    
    // Set a timer to check if this is a deletion or a move
    const timer = setTimeout(async () => {
      pendingRemovals.delete(filename);
      
      // Before deleting metadata, check if the file exists anywhere in file wrangler
      const fileExists = await findFileInFileWrangler(fileWranglerPath, filename);
      
      if (fileExists) {
        devLog(`File ${filename} still exists at ${fileExists} - updating metadata, not deleting`);
        
        // Update metadata with new path
        try {
          const metadataPath = path.join(fileWranglerPath, '.metadata.json');
          const metadata = await readMetadata(metadataPath);
          
          if (metadata[filename]) {
            await updateFileMetadata(metadataPath, filename, {
              ...metadata[filename],
              currentPath: fileExists,
              lastMoved: new Date().toISOString()
            });
            devLog(`Updated metadata for moved file: ${filename}`);
          }
          
          // Update inbox count if moved from inbox
          if (filePath.includes('/inbox/')) {
            mainWindow?.webContents.send('inbox-count-changed');
          }
        } catch (error) {
          errorLog('Error updating metadata for moved file:', error);
        }
      } else {
        // File was truly deleted
        devLog(`PDF removed from file wrangler: ${filename}`);
        mainWindow?.webContents.send('debug-log', `PDF removed: ${filename}`);
        
        // Clean up metadata for this file
        try {
          const metadataPath = path.join(fileWranglerPath, '.metadata.json');
          await updateFileMetadata(metadataPath, filename, null);
          devLog(`Cleaned up metadata for removed file: ${filename}`);
          
          // Update inbox count if needed
          mainWindow?.webContents.send('inbox-count-changed');
        } catch (error) {
          errorLog('Error cleaning up metadata for removed file:', error);
        }
        
        // Schedule comprehensive directory cleanup (debounced)
        scheduleDirectoryCleanup();
      }
    }, 1500); // Wait 1.5 seconds for move operations to complete before checking
    
    pendingRemovals.set(filename, timer);
  });
  
  // Also listen for all events to debug what's happening
  fileWranglerWatcher.on('all', (event: string, filePath: string) => {
    if (path.extname(filePath).toLowerCase() === '.pdf') {
      devLog(`File wrangler watcher event: ${event} for ${path.basename(filePath)}`);
    }
  });
  
  fileWranglerWatcher.on('add', async (filePath: string) => {
    // Only handle PDF files
    if (path.extname(filePath).toLowerCase() !== '.pdf') {
      return;
    }
    
    const filename = path.basename(filePath);
    devLog(`File added to file wrangler: ${filename} at ${filePath}`);
    
    // Check if this file was recently removed (indicating a move)
    if (pendingRemovals.has(filename)) {
      clearTimeout(pendingRemovals.get(filename)!);
      pendingRemovals.delete(filename);
      
      devLog(`File moved within file wrangler: ${filename} → ${filePath}`);
      mainWindow?.webContents.send('debug-log', `PDF moved: ${filename}`);
      
      // Update metadata with new path
      try {
        const metadataPath = path.join(fileWranglerPath, '.metadata.json');
        const metadata = await readMetadata(metadataPath);
        
        if (metadata[filename]) {
          // Update the currentPath
          await updateFileMetadata(metadataPath, filename, {
            ...metadata[filename],
            currentPath: filePath,
            lastMoved: new Date().toISOString()
          });
          devLog(`Updated metadata for moved file: ${filename}`);
        } else {
          devLog(`Warning: No metadata found for moved file: ${filename}`);
        }
        
        // Update inbox count if moved from/to inbox
        if (filePath.includes('/inbox/') || metadata[filename]?.inboxPath?.includes('/inbox/')) {
          mainWindow?.webContents.send('inbox-count-changed');
        }
      } catch (error) {
        errorLog('Error updating metadata for moved file:', error);
      }
    }
  });
  
  fileWranglerWatcher.on('error', (error: Error) => {
    errorLog('File wrangler watcher error:', error);
  });
  
  fileWranglerWatcher.on('ready', () => {
    devLog('File wrangler watcher is ready');
  });
};

// Note: PDF conversion now happens in main process with pdf2img-electron

// IPC handlers
ipcMain.handle('get-config', () => ({
  watchFolder: WATCH_FOLDER,
  openaiApiKey: OPENAI_API_KEY,
  llmModel: LLM_MODEL,
  useLowercase: USE_LOWERCASE,
  processingMode: PROCESSING_MODE,
  autoOrganize: AUTO_ORGANIZE,
  autoOrganizeThreshold: AUTO_ORGANIZE_THRESHOLD,
}));

ipcMain.handle('update-config', (_event, config) => {
  const oldWatchFolder = WATCH_FOLDER;
  
  if (config.watchFolder) {
    (store as any).set('watchFolder', config.watchFolder);
    WATCH_FOLDER = config.watchFolder;
  }
  if (config.openaiApiKey) {
    (store as any).set('openaiApiKey', config.openaiApiKey);
    OPENAI_API_KEY = config.openaiApiKey;
  }
  if (config.llmModel) {
    (store as any).set('llmModel', config.llmModel);
    LLM_MODEL = config.llmModel;
  }
  if (config.useLowercase !== undefined) {
    (store as any).set('useLowercase', config.useLowercase);
    USE_LOWERCASE = config.useLowercase;
  }
  if (config.processingMode) {
    (store as any).set('processingMode', config.processingMode);
    PROCESSING_MODE = config.processingMode;
  }
  if (config.autoOrganize !== undefined) {
    (store as any).set('autoOrganize', config.autoOrganize);
    AUTO_ORGANIZE = config.autoOrganize;
  }
  if (config.autoOrganizeThreshold !== undefined) {
    (store as any).set('autoOrganizeThreshold', config.autoOrganizeThreshold);
    AUTO_ORGANIZE_THRESHOLD = config.autoOrganizeThreshold;
  }
  
  // Restart watcher if folder changed
  if (config.watchFolder && config.watchFolder !== oldWatchFolder) {
    devLog('Watch folder changed from', oldWatchFolder, 'to', config.watchFolder);
    
    // Ensure new watch folder exists
    if (!fs.existsSync(WATCH_FOLDER)) {
      devLog('Creating new watch folder:', WATCH_FOLDER);
      fs.mkdirSync(WATCH_FOLDER, { recursive: true });
    }
    
    setupWatcher();
    setupFileWranglerWatcher();
  }
  
  // Reinitialize pipeline if API key, model, lowercase setting, or processing mode changed
  if ((config.openaiApiKey && config.openaiApiKey !== currentPipelineConfig.openaiApiKey) ||
      (config.llmModel && config.llmModel !== currentPipelineConfig.llmModel) ||
      (config.useLowercase !== undefined && config.useLowercase !== currentPipelineConfig.useLowercase) ||
      (config.processingMode && config.processingMode !== currentPipelineConfig.processingMode)) {
    pdfPipeline = null; // Force recreation on next use
  }
  
  return true;
});

ipcMain.handle('select-folder', async () => {
  const result = await dialog.showOpenDialog(mainWindow!, {
    properties: ['openDirectory']
  });
  
  if (!result.canceled) {
    return result.filePaths[0];
  }
  return null;
});

ipcMain.handle('show-notification', (_event, title: string, body: string) => {
  new Notification({ title, body }).show();
});

ipcMain.handle('open-folder', () => {
  shell.openPath(WATCH_FOLDER);
});

ipcMain.handle('get-ollama-models', async () => {
  try {
    const models = await fetchOllamaModels();
    return models;
  } catch (error) {
    errorLog('Failed to fetch Ollama models:', error);
    return [];
  }
});

ipcMain.handle('process-pdf', async (_event, filePath: string) => {
  return processPDFFile(filePath);
});

ipcMain.handle('organize-files', async () => {
  try {
    devLog('Starting file organization');
    mainWindow?.webContents.send('organization-status', { status: 'starting' });
    
    // Create organization pipelines
    const { organization: organizationPipeline } = createOrganizationPipeline(OPENAI_API_KEY, LLM_MODEL, USE_LOWERCASE);
    
    // Run the organization
    const initialState: OrganizationState = {
      watchFolder: WATCH_FOLDER,
      fileMetadata: {}
    };
    
    const result = await organizationPipeline.invoke(initialState as any) as OrganizationState;
    
    if (result.error) {
      errorLog('Organization error:', result.error);
      mainWindow?.webContents.send('organization-status', { 
        status: 'error', 
        error: result.error 
      });
      return { success: false, error: result.error };
    }
    
    devLog(`Organization complete: ${result.movedFiles} files organized`);
    mainWindow?.webContents.send('organization-status', { 
      status: 'complete', 
      movedFiles: result.movedFiles 
    });
    
    new Notification({
      title: 'Files Organized',
      body: `${result.movedFiles} files have been organized into folders`
    }).show();
    
    return { success: true, movedFiles: result.movedFiles };
  } catch (error) {
    errorLog('Failed to organize files:', error);
    mainWindow?.webContents.send('organization-status', { 
      status: 'error', 
      error: error instanceof Error ? error.message : 'Unknown error' 
    });
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
});

ipcMain.handle('get-inbox-count', async () => {
  try {
    const inboxPath = path.join(WATCH_FOLDER, 'file wrangler', 'inbox');
    if (!fs.existsSync(inboxPath)) {
      return 0;
    }
    const files = await fs.promises.readdir(inboxPath);
    const pdfFiles = files.filter(file => file.endsWith('.pdf'));
    return pdfFiles.length;
  } catch (error) {
    errorLog('Failed to count inbox files:', error);
    return 0;
  }
});

ipcMain.handle('reorganize-all-files', async () => {
  try {
    devLog('Starting full file reorganization');
    mainWindow?.webContents.send('organization-status', { status: 'starting', isReorganization: true });
    
    // Create organization pipelines
    const { reorganization: reorganizationPipeline } = createOrganizationPipeline(OPENAI_API_KEY, LLM_MODEL, USE_LOWERCASE);
    
    // Run the reorganization
    const initialState: OrganizationState = {
      watchFolder: WATCH_FOLDER,
      fileMetadata: {}
    };
    
    const result = await reorganizationPipeline.invoke(initialState as any) as OrganizationState;
    
    if (result.error) {
      errorLog('Reorganization error:', result.error);
      mainWindow?.webContents.send('organization-status', { 
        status: 'error', 
        error: result.error,
        isReorganization: true 
      });
      return { success: false, error: result.error };
    }
    
    devLog(`Reorganization complete: ${result.movedFiles} files reorganized`);
    mainWindow?.webContents.send('organization-status', { 
      status: 'complete', 
      movedFiles: result.movedFiles,
      isReorganization: true 
    });
    
    new Notification({
      title: 'Files Reorganized',
      body: `${result.movedFiles} files have been reorganized into optimal folders`
    }).show();
    
    return { success: true, movedFiles: result.movedFiles };
  } catch (error) {
    errorLog('Failed to reorganize files:', error);
    mainWindow?.webContents.send('organization-status', { 
      status: 'error', 
      error: error instanceof Error ? error.message : 'Unknown error',
      isReorganization: true 
    });
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
});

ipcMain.handle('cleanup-metadata', async () => {
  try {
    const removedCount = await cleanupMetadata(WATCH_FOLDER);
    devLog(`Metadata cleanup completed, removed ${removedCount} stale entries`);
    return { success: true, removedCount };
  } catch (error) {
    errorLog('Failed to cleanup metadata:', error);
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
});

ipcMain.handle('get-metadata-stats', async () => {
  try {
    const stats = await getMetadataStats(WATCH_FOLDER);
    return stats;
  } catch (error) {
    errorLog('Failed to get metadata stats:', error);
    return { totalEntries: 0, staleEntries: 0, validEntries: 0, byCategory: {} };
  }
});

// Note: PDF conversion now happens directly in main process

// Handle debug messages from renderer
ipcMain.on('renderer-debug', (_event, message: string) => {
  devLog('[Renderer Debug]:', message);
  mainWindow?.webContents.send('debug-log', `[Renderer] ${message}`);
});

// Note: pdf2img-electron reads files directly, so we don't need the read-pdf-file handler anymore

// Schedule auto-organization check with debouncing
function scheduleAutoOrganize() {
  if (!AUTO_ORGANIZE) {
    return;
  }
  
  // Clear existing timer if any
  if (autoOrganizeTimer) {
    clearTimeout(autoOrganizeTimer);
    devLog('Auto-organize timer reset');
  }
  
  // Set new timer for 10 seconds to ensure all files are processed
  autoOrganizeTimer = setTimeout(async () => {
    devLog('Auto-organize timer fired, checking inbox...');
    await checkAutoOrganize();
    autoOrganizeTimer = null;
  }, 10000);
}

// Check if auto-organization should run
async function checkAutoOrganize() {
  if (!AUTO_ORGANIZE) {
    return;
  }
  
  try {
    const inboxPath = path.join(WATCH_FOLDER, 'file wrangler', 'inbox');
    if (!fs.existsSync(inboxPath)) {
      return;
    }
    
    const files = await fs.promises.readdir(inboxPath);
    const pdfFiles = files.filter(file => file.endsWith('.pdf'));
    
    devLog(`Inbox check: ${pdfFiles.length} files (threshold: ${AUTO_ORGANIZE_THRESHOLD})`);
    
    if (pdfFiles.length >= AUTO_ORGANIZE_THRESHOLD) {
      devLog(`Auto-organize triggered: ${pdfFiles.length} files in inbox`);
      
      // Show notification that auto-organization is starting
      new Notification({
        title: 'Auto-Organizing Files',
        body: `Organizing ${pdfFiles.length} files in the inbox...`
      }).show();
      
      // Trigger organization
      const { organization: organizationPipeline } = createOrganizationPipeline(OPENAI_API_KEY, LLM_MODEL, USE_LOWERCASE);
      const initialState: OrganizationState = {
        watchFolder: WATCH_FOLDER,
        fileMetadata: {}
      };
      
      const result = await organizationPipeline.invoke(initialState as any) as OrganizationState;
      
      if (result.error) {
        errorLog('Auto-organization error:', result.error);
        mainWindow?.webContents.send('organization-status', { 
          status: 'error', 
          error: result.error 
        });
      } else {
        devLog(`Auto-organization complete: ${result.movedFiles} files organized`);
        mainWindow?.webContents.send('organization-status', { 
          status: 'complete', 
          movedFiles: result.movedFiles 
        });
        new Notification({
          title: 'Auto-Organization Complete',
          body: `${result.movedFiles} files have been organized into folders`
        }).show();
      }
    }
  } catch (error) {
    errorLog('Error checking auto-organize:', error);
  }
}

// Process PDFs from the queue sequentially
async function processQueue() {
  if (isProcessing || processingQueue.length === 0) {
    return;
  }
  
  isProcessing = true;
  
  while (processingQueue.length > 0) {
    const item = processingQueue.shift();
    if (!item) continue;
    
    try {
      await processPDFFile(item.filePath);
    } catch (error) {
      errorLog('Failed to process PDF:', item.filePath, error);
      mainWindow?.webContents.send('processing-update', {
        path: item.filePath,
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }
  
  isProcessing = false;
}

// Helper function to process PDF
async function processPDFFile(filePath: string) {
  const pipeline = initializePipeline();
  
  const initialState: PDFState = {
    path: filePath
  };
  
  let currentState: PDFState = initialState;
  
  // Send initial state
  mainWindow?.webContents.send('processing-update', { ...currentState });
  
  // Run the pipeline
  const stream = await pipeline.stream(initialState as any);
  
  for await (const chunk of stream) {
    // Update state with each step's output
    const [nodeName, nodeOutput] = Object.entries(chunk)[0];
    currentState = { ...currentState, ...(nodeOutput as Partial<PDFState>) } as PDFState;
    
    // Debug log for each step
    devLog(`Pipeline step: ${nodeName}`, nodeOutput);
    
    // Send debug info about what happened in this step
    const output = nodeOutput as Partial<PDFState>;
    if (nodeName === 'parse') {
      mainWindow?.webContents.send('debug-log', `Parse: ${output.rawText ? `Got ${output.rawText.length} chars` : 'No text'}`);
    } else if (nodeName === 'llm') {
      mainWindow?.webContents.send('debug-log', `LLM: ${output.meta ? 'Got metadata' : output.error || 'No metadata returned'}`);
    } else if (nodeName === 'rename') {
      mainWindow?.webContents.send('debug-log', `Rename: ${output.newPath ? 'Success' : output.error || 'Failed'}`);
    }
    
    if (currentState.error) {
      devLog(`Error in ${nodeName}:`, currentState.error);
      mainWindow?.webContents.send('debug-log', `Error in ${nodeName}: ${currentState.error}`);
    }
    
    // Map node names to status
    let status: string;
    switch (nodeName) {
      case 'parse':
        status = 'parsing';
        break;
      case 'llm':
        status = 'extracting';
        break;
      case 'rename':
        status = currentState.error ? 'error' : 'completed';
        break;
      default:
        status = 'processing';
    }
    
    mainWindow?.webContents.send('processing-update', {
      ...currentState,
      status,
      originalPath: filePath,
    });
  }
  
  if (currentState.newPath) {
    // Log the rename for debugging
    devLog(`PDF processed and moved: ${path.basename(filePath)} → ${path.basename(currentState.newPath)}`);
    
    new Notification({
      title: 'PDF Processed',
      body: `${path.basename(filePath)} → ${path.basename(currentState.newPath)}`
    }).show();
    
    // Schedule auto-organization check (with debouncing)
    scheduleAutoOrganize();
    
    // Set up file wrangler watcher if it's not already set up
    // (in case the directory was just created)
    if (!fileWranglerWatcher) {
      setupFileWranglerWatcher();
    }
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
app.on('ready', async () => {
  devLog('App ready, initializing...');
  
  // Set dock icon for macOS in development
  if (process.platform === 'darwin' && !app.isPackaged) {
    const dockIconPath = path.join(process.cwd(), 'src', 'assets', 'icon.png');
    if (fs.existsSync(dockIconPath)) {
      app.dock.setIcon(dockIconPath);
      devLog('Set dock icon:', dockIconPath);
    } else {
      devLog('Dock icon not found at:', dockIconPath);
    }
  }
  
  createWindow();
  createTray();
  
  // Wait a bit for window to be ready before setting up watcher
  // This helps ensure IPC is ready for debug messages
  setTimeout(() => {
    setupWatcher();
    setupFileWranglerWatcher();
    devLog('App initialization complete');
  }, 1000);
});

// Quit when all windows are closed.
app.on('window-all-closed', () => {
  app.quit();
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  } else {
    mainWindow?.show();
  }
});

// Extend the app object for the close event
declare global {
  namespace Electron {
    interface App {
      isQuitting?: boolean;
    }
  }
}

// Cleanup function
function cleanup() {
  devLog('Cleaning up before exit...');
  
  // Clear auto-organize timer
  if (autoOrganizeTimer) {
    clearTimeout(autoOrganizeTimer);
    autoOrganizeTimer = null;
  }
  
  // Clear directory cleanup timer
  if (directoryCleanupTimer) {
    clearTimeout(directoryCleanupTimer);
    directoryCleanupTimer = null;
  }
  
  // Close file watcher
  if (watcher) {
    watcher.close();
    watcher = null;
  }
  
  // Close file wrangler watcher
  if (fileWranglerWatcher) {
    fileWranglerWatcher.close();
    fileWranglerWatcher = null;
  }
  
  // Destroy tray
  if (tray) {
    tray.destroy();
    tray = null;
  }
  
  // Close all windows
  BrowserWindow.getAllWindows().forEach(window => {
    window.destroy();
  });
}

// Handle process termination signals
process.on('SIGINT', () => {
  devLog('Received SIGINT, cleaning up...');
  cleanup();
  app.quit();
});

process.on('SIGTERM', () => {
  devLog('Received SIGTERM, cleaning up...');
  cleanup();
  app.quit();
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  errorLog('Uncaught exception:', error);
  cleanup();
  app.quit();
});

// Handle app quit
app.on('before-quit', () => {
  devLog('App is quitting...');
  cleanup();
});